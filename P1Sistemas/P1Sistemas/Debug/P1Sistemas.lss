
P1Sistemas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000002b6  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b9e  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a3  00000000  00000000  00001771  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a6  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  8e:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:
#define CLK_PIN PD4    // Clock
#define DO_PIN  PD3    // Data Out

// Función para inicializar USART
void USART_Init(unsigned int ubrr) {
    UBRR0H = (unsigned char)(ubrr>>8);
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1<<TXEN0);
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <USART_Transmit>:
}

// Función para transmitir un carácter
void USART_Transmit(unsigned char data) {
    while (!(UCSR0A & (1<<UDRE0)));
  ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	95 ff       	sbrs	r25, 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <USART_Transmit>
    UDR0 = data;
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b8:	08 95       	ret

000000ba <USART_TransmitString>:
}

// Función para enviar una cadena de caracteres
void USART_TransmitString(char* str) {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24
    while (*str) {
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <USART_TransmitString+0xe>
        USART_Transmit(*str++);
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
    UDR0 = data;
}

// Función para enviar una cadena de caracteres
void USART_TransmitString(char* str) {
    while (*str) {
  c8:	88 81       	ld	r24, Y
  ca:	81 11       	cpse	r24, r1
  cc:	fa cf       	rjmp	.-12     	; 0xc2 <USART_TransmitString+0x8>
        USART_Transmit(*str++);
    }
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <uint8_to_string>:
// Función para convertir entero a cadena
void uint8_to_string(uint8_t value, char* str) {
    uint8_t i = 0, temp;
    
    // Caso especial para cero
    if (value == 0) {
  d4:	81 11       	cpse	r24, r1
  d6:	1f c0       	rjmp	.+62     	; 0x116 <uint8_to_string+0x42>
        str[0] = '0';
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	fb 01       	movw	r30, r22
  dc:	80 83       	st	Z, r24
        str[1] = '\0';
  de:	11 82       	std	Z+1, r1	; 0x01
        return;
  e0:	08 95       	ret
    }
    
    // Convertir dígitos
    while (value > 0) {
        temp = value % 10;
  e2:	3d ec       	ldi	r19, 0xCD	; 205
  e4:	83 9f       	mul	r24, r19
  e6:	31 2d       	mov	r19, r1
  e8:	11 24       	eor	r1, r1
  ea:	93 2f       	mov	r25, r19
  ec:	96 95       	lsr	r25
  ee:	96 95       	lsr	r25
  f0:	96 95       	lsr	r25
  f2:	99 0f       	add	r25, r25
  f4:	49 2f       	mov	r20, r25
  f6:	44 0f       	add	r20, r20
  f8:	44 0f       	add	r20, r20
  fa:	94 0f       	add	r25, r20
  fc:	89 1b       	sub	r24, r25
  fe:	98 2f       	mov	r25, r24
        str[i++] = temp + '0';
 100:	fb 01       	movw	r30, r22
 102:	e2 0f       	add	r30, r18
 104:	f1 1d       	adc	r31, r1
 106:	90 5d       	subi	r25, 0xD0	; 208
 108:	90 83       	st	Z, r25
        value /= 10;
 10a:	83 2f       	mov	r24, r19
 10c:	86 95       	lsr	r24
 10e:	86 95       	lsr	r24
 110:	86 95       	lsr	r24
    }
    
    // Convertir dígitos
    while (value > 0) {
        temp = value % 10;
        str[i++] = temp + '0';
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	01 c0       	rjmp	.+2      	; 0x118 <uint8_to_string+0x44>
 116:	20 e0       	ldi	r18, 0x00	; 0
        str[1] = '\0';
        return;
    }
    
    // Convertir dígitos
    while (value > 0) {
 118:	81 11       	cpse	r24, r1
 11a:	e3 cf       	rjmp	.-58     	; 0xe2 <uint8_to_string+0xe>
        str[i++] = temp + '0';
        value /= 10;
    }
    
    // Terminar cadena
    str[i] = '\0';
 11c:	fb 01       	movw	r30, r22
 11e:	e2 0f       	add	r30, r18
 120:	f1 1d       	adc	r31, r1
 122:	10 82       	st	Z, r1
    
    // Invertir la cadena
    for (uint8_t j = 0; j < i/2; j++) {
 124:	11 c0       	rjmp	.+34     	; 0x148 <uint8_to_string+0x74>
        temp = str[j];
 126:	48 2f       	mov	r20, r24
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	db 01       	movw	r26, r22
 12c:	a4 0f       	add	r26, r20
 12e:	b5 1f       	adc	r27, r21
 130:	9c 91       	ld	r25, X
        str[j] = str[i-j-1];
 132:	e2 2f       	mov	r30, r18
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e4 1b       	sub	r30, r20
 138:	f5 0b       	sbc	r31, r21
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	e6 0f       	add	r30, r22
 13e:	f7 1f       	adc	r31, r23
 140:	30 81       	ld	r19, Z
 142:	3c 93       	st	X, r19
        str[i-j-1] = temp;
 144:	90 83       	st	Z, r25
    
    // Terminar cadena
    str[i] = '\0';
    
    // Invertir la cadena
    for (uint8_t j = 0; j < i/2; j++) {
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	92 2f       	mov	r25, r18
 14a:	96 95       	lsr	r25
 14c:	89 17       	cp	r24, r25
 14e:	58 f3       	brcs	.-42     	; 0x126 <uint8_to_string+0x52>
 150:	08 95       	ret

00000152 <readADC0831>:
// Función para leer un valor del ADC0831 (8 bits)
uint8_t readADC0831(void) {
    uint8_t value = 0;
    
    // Comenzar la conversión (CS a bajo)
    PORTD &= ~(1 << CS_PIN);
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	8b 7f       	andi	r24, 0xFB	; 251
 156:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <readADC0831+0x8>
 15e:	00 00       	nop
    _delay_us(10);
    
    // Primer pulso de reloj para iniciar conversión
    PORTD |= (1 << CLK_PIN);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	80 61       	ori	r24, 0x10	; 16
 164:	8b b9       	out	0x0b, r24	; 11
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <readADC0831+0x16>
 16c:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	8f 7e       	andi	r24, 0xEF	; 239
 172:	8b b9       	out	0x0b, r24	; 11
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <readADC0831+0x24>
 17a:	00 00       	nop
    _delay_us(10);
    
    // El primer bit es nulo en ADC0831, lo ignoramos
    PORTD |= (1 << CLK_PIN);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	8b b9       	out	0x0b, r24	; 11
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	9a 95       	dec	r25
 186:	f1 f7       	brne	.-4      	; 0x184 <readADC0831+0x32>
 188:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <readADC0831+0x40>
 196:	00 00       	nop
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
 198:	27 e0       	ldi	r18, 0x07	; 7
 19a:	30 e0       	ldi	r19, 0x00	; 0
    }
}

// Función para leer un valor del ADC0831 (8 bits)
uint8_t readADC0831(void) {
    uint8_t value = 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
 19e:	1b c0       	rjmp	.+54     	; 0x1d6 <readADC0831+0x84>
        // Generar pulso de reloj
        PORTD |= (1 << CLK_PIN);
 1a0:	9b b1       	in	r25, 0x0b	; 11
 1a2:	90 61       	ori	r25, 0x10	; 16
 1a4:	9b b9       	out	0x0b, r25	; 11
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	9a 95       	dec	r25
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <readADC0831+0x56>
 1ac:	00 00       	nop
        _delay_us(10);
        
        // Leer el bit de datos
        if (PIND & (1 << DO_PIN))
 1ae:	4b 9b       	sbis	0x09, 3	; 9
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <readADC0831+0x72>
            value |= (1 << i);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	02 2e       	mov	r0, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <readADC0831+0x6c>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <readADC0831+0x68>
 1c2:	84 2b       	or	r24, r20
            
        PORTD &= ~(1 << CLK_PIN);
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	9f 7e       	andi	r25, 0xEF	; 239
 1c8:	9b b9       	out	0x0b, r25	; 11
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <readADC0831+0x7a>
 1d0:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	31 09       	sbc	r19, r1
 1d6:	33 23       	and	r19, r19
 1d8:	1c f7       	brge	.-58     	; 0x1a0 <readADC0831+0x4e>
        PORTD &= ~(1 << CLK_PIN);
        _delay_us(10);
    }
    
    // Finalizar la conversión (CS a alto)
    PORTD |= (1 << CS_PIN);
 1da:	9b b1       	in	r25, 0x0b	; 11
 1dc:	94 60       	ori	r25, 0x04	; 4
 1de:	9b b9       	out	0x0b, r25	; 11
    
    return value;
}
 1e0:	08 95       	ret

000001e2 <main>:

int main(void) {
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	2a 97       	sbiw	r28, 0x0a	; 10
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
    char buffer[10]; // Buffer para formatear valores numéricos
    
    // Configurar los pines del ADC
    DDRD |= (1 << CS_PIN) | (1 << CLK_PIN);  // CS y CLK como salidas
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	84 61       	ori	r24, 0x14	; 20
 1fa:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << DO_PIN);                  // DO como entrada
 1fc:	8a b1       	in	r24, 0x0a	; 10
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << DO_PIN);                  // Activar pull-up en DO
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	88 60       	ori	r24, 0x08	; 8
 206:	8b b9       	out	0x0b, r24	; 11
    
    // Establecer estados iniciales
    PORTD |= (1 << CS_PIN);    // CS inicialmente en alto
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << CLK_PIN);  // CLK inicialmente en bajo
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	8f 7e       	andi	r24, 0xEF	; 239
 212:	8b b9       	out	0x0b, r24	; 11
    
    // Configurar PORTB como salida para LEDs
    DDRB = 0xFF;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;  // Inicializar apagados
 218:	15 b8       	out	0x05, r1	; 5
    
    // Inicializar USART
    USART_Init(MYUBRR);
 21a:	89 e1       	ldi	r24, 0x19	; 25
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	87 ea       	ldi	r24, 0xA7	; 167
 224:	91 e6       	ldi	r25, 0x61	; 97
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x44>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x4a>
 22c:	00 00       	nop
    
    // Retardo inicial para estabilización
    _delay_ms(100);
    
    // Mensaje de inicio
    USART_TransmitString("Iniciando lectura del ADC\r\n");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
    
    while (1) {
        // Leer valor del ADC
        uint8_t adc_value = readADC0831();
 236:	0e 94 a9 00 	call	0x152	; 0x152 <readADC0831>
 23a:	f8 2e       	mov	r15, r24
        
        // Actualizar LEDs según valor leído
        PORTB = adc_value;
 23c:	85 b9       	out	0x05, r24	; 5
        
        // Enviar valor numérico por UART
        USART_TransmitString("Valor: ");
 23e:	8c e1       	ldi	r24, 0x1C	; 28
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        uint8_to_string(adc_value, buffer);
 246:	be 01       	movw	r22, r28
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	8f 2d       	mov	r24, r15
 24e:	0e 94 6a 00 	call	0xd4	; 0xd4 <uint8_to_string>
        USART_TransmitString(buffer);
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        
        // Mostrar representación binaria de LEDs
        USART_TransmitString(" | LEDs: ");
 25a:	84 e2       	ldi	r24, 0x24	; 36
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        for (int i = 7; i >= 0; i--) {
 262:	07 e0       	ldi	r16, 0x07	; 7
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	15 c0       	rjmp	.+42     	; 0x292 <main+0xb0>
            if (adc_value & (1 << i)) {
 268:	8f 2d       	mov	r24, r15
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	00 2e       	mov	r0, r16
 26e:	02 c0       	rjmp	.+4      	; 0x274 <main+0x92>
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <main+0x8e>
 278:	80 ff       	sbrs	r24, 0
 27a:	05 c0       	rjmp	.+10     	; 0x286 <main+0xa4>
                USART_TransmitString("1");
 27c:	8e e2       	ldi	r24, 0x2E	; 46
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
 284:	04 c0       	rjmp	.+8      	; 0x28e <main+0xac>
            } else {
                USART_TransmitString("0");
 286:	80 e3       	ldi	r24, 0x30	; 48
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        uint8_to_string(adc_value, buffer);
        USART_TransmitString(buffer);
        
        // Mostrar representación binaria de LEDs
        USART_TransmitString(" | LEDs: ");
        for (int i = 7; i >= 0; i--) {
 28e:	01 50       	subi	r16, 0x01	; 1
 290:	11 09       	sbc	r17, r1
 292:	11 23       	and	r17, r17
 294:	4c f7       	brge	.-46     	; 0x268 <main+0x86>
                USART_TransmitString("1");
            } else {
                USART_TransmitString("0");
            }
        }
        USART_TransmitString("\r\n");
 296:	89 e1       	ldi	r24, 0x19	; 25
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
 29e:	9f e9       	ldi	r25, 0x9F	; 159
 2a0:	26 e8       	ldi	r18, 0x86	; 134
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	91 50       	subi	r25, 0x01	; 1
 2a6:	20 40       	sbci	r18, 0x00	; 0
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0xc2>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0xcc>
 2ae:	00 00       	nop
 2b0:	c2 cf       	rjmp	.-124    	; 0x236 <main+0x54>

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
