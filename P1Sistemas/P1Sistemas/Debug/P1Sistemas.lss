
P1Sistemas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000999  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071d  00000000  00000000  00000bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000239  00000000  00000000  00001ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  78:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <readADC0831>:
// Función para leer un valor del ADC0831 (8 bits) - protocolo revisado
uint8_t readADC0831(void) {
    uint8_t value = 0;
    
    // Comenzar la conversión (CS a bajo)
    PORTD &= ~(1 << CS_PIN);
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	85 e3       	ldi	r24, 0x35	; 53
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <readADC0831+0x8>
  8c:	00 00       	nop
    _delay_us(10);  // Mayor delay para estabilidad
    
    // Primer pulso de reloj para iniciar conversión
    PORTD |= (1 << CLK_PIN);
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	80 61       	ori	r24, 0x10	; 16
  92:	8b b9       	out	0x0b, r24	; 11
  94:	95 e3       	ldi	r25, 0x35	; 53
  96:	9a 95       	dec	r25
  98:	f1 f7       	brne	.-4      	; 0x96 <readADC0831+0x16>
  9a:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	8b b9       	out	0x0b, r24	; 11
  a2:	85 e3       	ldi	r24, 0x35	; 53
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <readADC0831+0x24>
  a8:	00 00       	nop
    _delay_us(10);
    
    // El primer bit es nulo en ADC0831, lo ignoramos
    PORTD |= (1 << CLK_PIN);
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	95 e3       	ldi	r25, 0x35	; 53
  b2:	9a 95       	dec	r25
  b4:	f1 f7       	brne	.-4      	; 0xb2 <readADC0831+0x32>
  b6:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8f 7e       	andi	r24, 0xEF	; 239
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	85 e3       	ldi	r24, 0x35	; 53
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <readADC0831+0x40>
  c4:	00 00       	nop
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
  c6:	27 e0       	ldi	r18, 0x07	; 7
  c8:	30 e0       	ldi	r19, 0x00	; 0
#define CLK_PIN PD4    // Clock - PIN 7 del ADC0831
#define DO_PIN  PD3    // Data Out - PIN 6 del ADC0831

// Función para leer un valor del ADC0831 (8 bits) - protocolo revisado
uint8_t readADC0831(void) {
    uint8_t value = 0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
  cc:	1b c0       	rjmp	.+54     	; 0x104 <readADC0831+0x84>
        // Generar pulso de reloj
        PORTD |= (1 << CLK_PIN);
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	90 61       	ori	r25, 0x10	; 16
  d2:	9b b9       	out	0x0b, r25	; 11
  d4:	95 e3       	ldi	r25, 0x35	; 53
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <readADC0831+0x56>
  da:	00 00       	nop
        _delay_us(10);
        
        // Leer el bit de datos
        if (PIND & (1 << DO_PIN))
  dc:	4b 9b       	sbis	0x09, 3	; 9
  de:	09 c0       	rjmp	.+18     	; 0xf2 <readADC0831+0x72>
            value |= (1 << i);
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	02 2e       	mov	r0, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <readADC0831+0x6c>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <readADC0831+0x68>
  f0:	84 2b       	or	r24, r20
            
        PORTD &= ~(1 << CLK_PIN);
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	9f 7e       	andi	r25, 0xEF	; 239
  f6:	9b b9       	out	0x0b, r25	; 11
  f8:	95 e3       	ldi	r25, 0x35	; 53
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <readADC0831+0x7a>
  fe:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	33 23       	and	r19, r19
 106:	1c f7       	brge	.-58     	; 0xce <readADC0831+0x4e>
        PORTD &= ~(1 << CLK_PIN);
        _delay_us(10);
    }
    
    // Finalizar la conversión (CS a alto)
    PORTD |= (1 << CS_PIN);
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	94 60       	ori	r25, 0x04	; 4
 10c:	9b b9       	out	0x0b, r25	; 11
    
    return value;
}
 10e:	08 95       	ret

00000110 <updateLEDs>:
    // Mapear el valor del ADC (0-255) a los LEDs
    // Si el valor es 0, todos apagados
    // Si el valor es 255, todos encendidos
    
    // Establece directamente los bits para los LEDs
    PORTB = value;
 110:	85 b9       	out	0x05, r24	; 5
 112:	08 95       	ret

00000114 <main>:
}

int main(void) {
    // Configurar los pines del ADC como salidas/entradas
    DDRD |= (1 << CS_PIN) | (1 << CLK_PIN);  // CS y CLK como salidas
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	84 61       	ori	r24, 0x14	; 20
 118:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << DO_PIN);                 // DO como entrada
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	87 7f       	andi	r24, 0xF7	; 247
 11e:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << DO_PIN);                 // Activar pull-up en DO
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	88 60       	ori	r24, 0x08	; 8
 124:	8b b9       	out	0x0b, r24	; 11
    
    // Establecer estados iniciales
    PORTD |= (1 << CS_PIN);   // CS inicialmente en alto
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << CLK_PIN); // CLK inicialmente en bajo
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	8f 7e       	andi	r24, 0xEF	; 239
 130:	8b b9       	out	0x0b, r24	; 11
    
    // Configurar todo el Puerto B como salida para los LEDs
    DDRB = 0xFF;  // 0xFF = 0b11111111 (todos los pines como salida)
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	84 b9       	out	0x04, r24	; 4
    
    // Inicializar LEDs apagados
    PORTB = 0x00;
 136:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	81 ee       	ldi	r24, 0xE1	; 225
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x2a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x34>
 148:	00 00       	nop
    _delay_ms(100);
    
    // Bucle principal
    while (1) {
        // Leer valor del ADC (0-255)
        uint8_t adc_value = readADC0831();
 14a:	0e 94 40 00 	call	0x80	; 0x80 <readADC0831>
        
        // Actualizar LEDs según el valor leído
        updateLEDs(adc_value);
 14e:	0e 94 88 00 	call	0x110	; 0x110 <updateLEDs>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x44>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x4e>
 162:	00 00       	nop
 164:	f2 cf       	rjmp	.-28     	; 0x14a <main+0x36>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
