
P1Sistemas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc3  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000569  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a2  00000000  00000000  0000233f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000026e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  9e:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_system>:
void send_uart_string(const char* str) {
    while(*str) {
        send_uart_data(*str);
        str++;
    }
}
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	87 b9       	out	0x07, r24	; 7
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	88 b9       	out	0x08, r24	; 8
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	88 b9       	out	0x08, r24	; 8
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 b9       	out	0x04, r24	; 4
  c8:	15 b8       	out	0x05, r1	; 5
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ed       	ldi	r24, 0xD3	; 211
  d0:	90 e3       	ldi	r25, 0x30	; 48
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <init_system+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <init_system+0x36>
  dc:	00 00       	nop
  de:	15 b8       	out	0x05, r1	; 5
  e0:	08 95       	ret

000000e2 <read_adc0831>:
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	85 e3       	ldi	r24, 0x35	; 53
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <read_adc0831+0x8>
  ee:	00 00       	nop
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	12 c0       	rjmp	.+36     	; 0x11a <read_adc0831+0x38>
  f6:	98 b1       	in	r25, 0x08	; 8
  f8:	92 60       	ori	r25, 0x02	; 2
  fa:	98 b9       	out	0x08, r25	; 8
  fc:	95 e3       	ldi	r25, 0x35	; 53
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <read_adc0831+0x1c>
 102:	00 00       	nop
 104:	88 0f       	add	r24, r24
 106:	32 99       	sbic	0x06, 2	; 6
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	98 b1       	in	r25, 0x08	; 8
 10c:	9d 7f       	andi	r25, 0xFD	; 253
 10e:	98 b9       	out	0x08, r25	; 8
 110:	95 e3       	ldi	r25, 0x35	; 53
 112:	9a 95       	dec	r25
 114:	f1 f7       	brne	.-4      	; 0x112 <read_adc0831+0x30>
 116:	00 00       	nop
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	28 30       	cpi	r18, 0x08	; 8
 11c:	60 f3       	brcs	.-40     	; 0xf6 <read_adc0831+0x14>
 11e:	98 b1       	in	r25, 0x08	; 8
 120:	91 60       	ori	r25, 0x01	; 1
 122:	98 b9       	out	0x08, r25	; 8
 124:	95 e3       	ldi	r25, 0x35	; 53
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <read_adc0831+0x44>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <init_uart>:
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 13a:	88 e1       	ldi	r24, 0x18	; 24
 13c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 146:	08 95       	ret

00000148 <send_uart_data>:
 148:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	95 ff       	sbrs	r25, 5
 14e:	fc cf       	rjmp	.-8      	; 0x148 <send_uart_data>
 150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 154:	08 95       	ret

00000156 <main>:
{
    unsigned char test_counter = 0;
    unsigned char led_pattern = 1;
    
    // Inicializar sistema
    init_system();
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <init_system>
    init_uart();
 15a:	0e 94 97 00 	call	0x12e	; 0x12e <init_uart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	87 ea       	ldi	r24, 0xA7	; 167
 162:	91 e6       	ldi	r25, 0x61	; 97
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0xe>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x18>
 16e:	00 00       	nop
}

int main(void)
{
    unsigned char test_counter = 0;
    unsigned char led_pattern = 1;
 170:	c1 e0       	ldi	r28, 0x01	; 1
    }
}

int main(void)
{
    unsigned char test_counter = 0;
 172:	10 e0       	ldi	r17, 0x00	; 0
    _delay_ms(2000);
    
    while (1) 
    {
        // TEST 1: Enviar datos constantemente por UART
        send_uart_data('T');
 174:	84 e5       	ldi	r24, 0x54	; 84
 176:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('E');
 17a:	85 e4       	ldi	r24, 0x45	; 69
 17c:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('S');
 180:	83 e5       	ldi	r24, 0x53	; 83
 182:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('T');
 186:	84 e5       	ldi	r24, 0x54	; 84
 188:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data(':');
 18c:	8a e3       	ldi	r24, 0x3A	; 58
 18e:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('0' + (test_counter % 10));
 192:	8d ec       	ldi	r24, 0xCD	; 205
 194:	18 9f       	mul	r17, r24
 196:	81 2d       	mov	r24, r1
 198:	11 24       	eor	r1, r1
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	86 95       	lsr	r24
 1a0:	88 0f       	add	r24, r24
 1a2:	98 2f       	mov	r25, r24
 1a4:	99 0f       	add	r25, r25
 1a6:	99 0f       	add	r25, r25
 1a8:	89 0f       	add	r24, r25
 1aa:	21 2f       	mov	r18, r17
 1ac:	28 1b       	sub	r18, r24
 1ae:	82 2f       	mov	r24, r18
 1b0:	80 5d       	subi	r24, 0xD0	; 208
 1b2:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('\r');
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('\n');
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        
        // TEST 2: Patrón de LEDs rotante
        LED_PORT = led_pattern;
 1c2:	c5 b9       	out	0x05, r28	; 5
        led_pattern = (led_pattern << 1) | (led_pattern >> 7); // Rotar bits
 1c4:	8c 2f       	mov	r24, r28
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	cc 1f       	adc	r28, r28
 1ce:	cc 27       	eor	r28, r28
 1d0:	cc 1f       	adc	r28, r28
 1d2:	c8 2b       	or	r28, r24
        
        // TEST 3: Intentar leer ADC0831
        adc_value = read_adc0831();
 1d4:	0e 94 71 00 	call	0xe2	; 0xe2 <read_adc0831>
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        
        // Enviar valor ADC
        send_uart_data('A');
 1dc:	81 e4       	ldi	r24, 0x41	; 65
 1de:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('D');
 1e2:	84 e4       	ldi	r24, 0x44	; 68
 1e4:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('C');
 1e8:	83 e4       	ldi	r24, 0x43	; 67
 1ea:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data(':');
 1ee:	8a e3       	ldi	r24, 0x3A	; 58
 1f0:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        
        // Convertir a hexadecimal para simplicidad
        unsigned char high_nibble = (adc_value >> 4) & 0x0F;
 1f4:	d0 91 00 01 	lds	r29, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f8:	8d 2f       	mov	r24, r29
 1fa:	82 95       	swap	r24
 1fc:	8f 70       	andi	r24, 0x0F	; 15
        unsigned char low_nibble = adc_value & 0x0F;
 1fe:	df 70       	andi	r29, 0x0F	; 15
        
        if(high_nibble < 10) {
 200:	8a 30       	cpi	r24, 0x0A	; 10
 202:	20 f4       	brcc	.+8      	; 0x20c <main+0xb6>
            send_uart_data('0' + high_nibble);
 204:	80 5d       	subi	r24, 0xD0	; 208
 206:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
 20a:	03 c0       	rjmp	.+6      	; 0x212 <main+0xbc>
        } else {
            send_uart_data('A' + high_nibble - 10);
 20c:	89 5c       	subi	r24, 0xC9	; 201
 20e:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        }
        
        if(low_nibble < 10) {
 212:	da 30       	cpi	r29, 0x0A	; 10
 214:	28 f4       	brcc	.+10     	; 0x220 <main+0xca>
            send_uart_data('0' + low_nibble);
 216:	80 e3       	ldi	r24, 0x30	; 48
 218:	8d 0f       	add	r24, r29
 21a:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
 21e:	04 c0       	rjmp	.+8      	; 0x228 <main+0xd2>
        } else {
            send_uart_data('A' + low_nibble - 10);
 220:	87 e3       	ldi	r24, 0x37	; 55
 222:	8d 0f       	add	r24, r29
 224:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        }
        
        send_uart_data('\r');
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        send_uart_data('\n');
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	0e 94 a4 00 	call	0x148	; 0x148 <send_uart_data>
        
        test_counter++;
 234:	1f 5f       	subi	r17, 0xFF	; 255
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	93 ed       	ldi	r25, 0xD3	; 211
 23a:	20 e3       	ldi	r18, 0x30	; 48
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0xe6>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0xf0>
 246:	00 00       	nop
 248:	95 cf       	rjmp	.-214    	; 0x174 <main+0x1e>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
