
P1Sistemas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000003ee  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbd  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052f  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000461  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000528  00000000  00000000  00002425  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000294d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  8e:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:
// Voltaje de referencia para el ADC (en mV)
#define VREF 5000      // 5V = 5000mV

// Función para inicializar USART
void USART_Init(unsigned int ubrr) {
    UBRR0H = (unsigned char)(ubrr>>8);
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1<<TXEN0);
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <USART_Transmit>:
}

// Función para transmitir un carácter
void USART_Transmit(unsigned char data) {
    while (!(UCSR0A & (1<<UDRE0)));
  ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	95 ff       	sbrs	r25, 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <USART_Transmit>
    UDR0 = data;
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b8:	08 95       	ret

000000ba <USART_TransmitString>:
}

// Función para enviar una cadena de caracteres
void USART_TransmitString(char* str) {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24
    while (*str) {
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <USART_TransmitString+0xe>
        USART_Transmit(*str++);
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
    UDR0 = data;
}

// Función para enviar una cadena de caracteres
void USART_TransmitString(char* str) {
    while (*str) {
  c8:	88 81       	ld	r24, Y
  ca:	81 11       	cpse	r24, r1
  cc:	fa cf       	rjmp	.-12     	; 0xc2 <USART_TransmitString+0x8>
        USART_Transmit(*str++);
    }
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <uint8_to_string>:
// Función para convertir entero a cadena
void uint8_to_string(uint8_t value, char* str) {
    uint8_t i = 0, temp;
    
    // Caso especial para cero
    if (value == 0) {
  d4:	81 11       	cpse	r24, r1
  d6:	1f c0       	rjmp	.+62     	; 0x116 <uint8_to_string+0x42>
        str[0] = '0';
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	fb 01       	movw	r30, r22
  dc:	80 83       	st	Z, r24
        str[1] = '\0';
  de:	11 82       	std	Z+1, r1	; 0x01
        return;
  e0:	08 95       	ret
    }
    
    // Convertir dígitos
    while (value > 0) {
        temp = value % 10;
  e2:	3d ec       	ldi	r19, 0xCD	; 205
  e4:	83 9f       	mul	r24, r19
  e6:	31 2d       	mov	r19, r1
  e8:	11 24       	eor	r1, r1
  ea:	93 2f       	mov	r25, r19
  ec:	96 95       	lsr	r25
  ee:	96 95       	lsr	r25
  f0:	96 95       	lsr	r25
  f2:	99 0f       	add	r25, r25
  f4:	49 2f       	mov	r20, r25
  f6:	44 0f       	add	r20, r20
  f8:	44 0f       	add	r20, r20
  fa:	94 0f       	add	r25, r20
  fc:	89 1b       	sub	r24, r25
  fe:	98 2f       	mov	r25, r24
        str[i++] = temp + '0';
 100:	fb 01       	movw	r30, r22
 102:	e2 0f       	add	r30, r18
 104:	f1 1d       	adc	r31, r1
 106:	90 5d       	subi	r25, 0xD0	; 208
 108:	90 83       	st	Z, r25
        value /= 10;
 10a:	83 2f       	mov	r24, r19
 10c:	86 95       	lsr	r24
 10e:	86 95       	lsr	r24
 110:	86 95       	lsr	r24
    }
    
    // Convertir dígitos
    while (value > 0) {
        temp = value % 10;
        str[i++] = temp + '0';
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	01 c0       	rjmp	.+2      	; 0x118 <uint8_to_string+0x44>
 116:	20 e0       	ldi	r18, 0x00	; 0
        str[1] = '\0';
        return;
    }
    
    // Convertir dígitos
    while (value > 0) {
 118:	81 11       	cpse	r24, r1
 11a:	e3 cf       	rjmp	.-58     	; 0xe2 <uint8_to_string+0xe>
        str[i++] = temp + '0';
        value /= 10;
    }
    
    // Terminar cadena
    str[i] = '\0';
 11c:	fb 01       	movw	r30, r22
 11e:	e2 0f       	add	r30, r18
 120:	f1 1d       	adc	r31, r1
 122:	10 82       	st	Z, r1
    
    // Invertir la cadena
    for (uint8_t j = 0; j < i/2; j++) {
 124:	11 c0       	rjmp	.+34     	; 0x148 <uint8_to_string+0x74>
        temp = str[j];
 126:	48 2f       	mov	r20, r24
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	db 01       	movw	r26, r22
 12c:	a4 0f       	add	r26, r20
 12e:	b5 1f       	adc	r27, r21
 130:	9c 91       	ld	r25, X
        str[j] = str[i-j-1];
 132:	e2 2f       	mov	r30, r18
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e4 1b       	sub	r30, r20
 138:	f5 0b       	sbc	r31, r21
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	e6 0f       	add	r30, r22
 13e:	f7 1f       	adc	r31, r23
 140:	30 81       	ld	r19, Z
 142:	3c 93       	st	X, r19
        str[i-j-1] = temp;
 144:	90 83       	st	Z, r25
    
    // Terminar cadena
    str[i] = '\0';
    
    // Invertir la cadena
    for (uint8_t j = 0; j < i/2; j++) {
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	92 2f       	mov	r25, r18
 14a:	96 95       	lsr	r25
 14c:	89 17       	cp	r24, r25
 14e:	58 f3       	brcs	.-42     	; 0x126 <uint8_to_string+0x52>
 150:	08 95       	ret

00000152 <voltage_to_string>:
        str[i-j-1] = temp;
    }
}

// Función para convertir un valor de voltaje a una cadena (con 2 decimales)
void voltage_to_string(uint16_t voltage_mv, char* str) {
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
 15c:	eb 01       	movw	r28, r22
    // Separar en volts y milivolts
    uint8_t volts = voltage_mv / 1000;
 15e:	fc 01       	movw	r30, r24
 160:	f6 95       	lsr	r31
 162:	e7 95       	ror	r30
 164:	f6 95       	lsr	r31
 166:	e7 95       	ror	r30
 168:	f6 95       	lsr	r31
 16a:	e7 95       	ror	r30
 16c:	9f 01       	movw	r18, r30
 16e:	a5 ec       	ldi	r26, 0xC5	; 197
 170:	b0 e2       	ldi	r27, 0x20	; 32
 172:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__umulhisi3>
 176:	ac 01       	movw	r20, r24
 178:	52 95       	swap	r21
 17a:	42 95       	swap	r20
 17c:	4f 70       	andi	r20, 0x0F	; 15
 17e:	45 27       	eor	r20, r21
 180:	5f 70       	andi	r21, 0x0F	; 15
 182:	45 27       	eor	r20, r21
    uint16_t millivolts = voltage_mv % 1000;
 184:	28 ee       	ldi	r18, 0xE8	; 232
 186:	33 e0       	ldi	r19, 0x03	; 3
 188:	42 9f       	mul	r20, r18
 18a:	c0 01       	movw	r24, r0
 18c:	43 9f       	mul	r20, r19
 18e:	90 0d       	add	r25, r0
 190:	52 9f       	mul	r21, r18
 192:	90 0d       	add	r25, r0
 194:	11 24       	eor	r1, r1
 196:	08 1b       	sub	r16, r24
 198:	19 0b       	sbc	r17, r25
    
    // Convertir parte entera
    uint8_to_string(volts, str);
 19a:	be 01       	movw	r22, r28
 19c:	84 2f       	mov	r24, r20
 19e:	0e 94 6a 00 	call	0xd4	; 0xd4 <uint8_to_string>
    
    // Agregar punto decimal
    char* p = str;
    while (*p) p++; // Ir al final de la cadena
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <voltage_to_string+0x54>
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	98 81       	ld	r25, Y
 1a8:	91 11       	cpse	r25, r1
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <voltage_to_string+0x52>
    *p++ = '.';
 1ac:	be 01       	movw	r22, r28
 1ae:	6f 5f       	subi	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	8e e2       	ldi	r24, 0x2E	; 46
 1b4:	88 83       	st	Y, r24
    
    // Garantizar 3 dígitos para los milivolts (formato x.xxx V)
    if (millivolts < 10) {
 1b6:	0a 30       	cpi	r16, 0x0A	; 10
 1b8:	11 05       	cpc	r17, r1
 1ba:	30 f4       	brcc	.+12     	; 0x1c8 <voltage_to_string+0x76>
        *p++ = '0';
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	89 83       	std	Y+1, r24	; 0x01
        *p++ = '0';
 1c0:	6e 5f       	subi	r22, 0xFE	; 254
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	8a 83       	std	Y+2, r24	; 0x02
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <voltage_to_string+0x86>
    } else if (millivolts < 100) {
 1c8:	04 36       	cpi	r16, 0x64	; 100
 1ca:	11 05       	cpc	r17, r1
 1cc:	28 f4       	brcc	.+10     	; 0x1d8 <voltage_to_string+0x86>
        *p++ = '0';
 1ce:	be 01       	movw	r22, r28
 1d0:	6e 5f       	subi	r22, 0xFE	; 254
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	80 e3       	ldi	r24, 0x30	; 48
 1d6:	89 83       	std	Y+1, r24	; 0x01
    }
    
    // Convertir parte decimal
    uint8_to_string(millivolts, p);
 1d8:	80 2f       	mov	r24, r16
 1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <uint8_to_string>
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <readADC0831>:
// Función para leer un valor del ADC0831 (8 bits)
uint8_t readADC0831(void) {
    uint8_t value = 0;
    
    // Comenzar la conversión (CS a bajo)
    PORTD &= ~(1 << CS_PIN);
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	8a 95       	dec	r24
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <readADC0831+0x8>
 1f4:	00 00       	nop
    _delay_us(10);
    
    // Primer pulso de reloj para iniciar conversión
    PORTD |= (1 << CLK_PIN);
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	80 61       	ori	r24, 0x10	; 16
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	93 e0       	ldi	r25, 0x03	; 3
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <readADC0831+0x16>
 202:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 7e       	andi	r24, 0xEF	; 239
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <readADC0831+0x24>
 210:	00 00       	nop
    _delay_us(10);
    
    // El primer bit es nulo en ADC0831, lo ignoramos
    PORTD |= (1 << CLK_PIN);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	80 61       	ori	r24, 0x10	; 16
 216:	8b b9       	out	0x0b, r24	; 11
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <readADC0831+0x32>
 21e:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	8f 7e       	andi	r24, 0xEF	; 239
 224:	8b b9       	out	0x0b, r24	; 11
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <readADC0831+0x40>
 22c:	00 00       	nop
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
 22e:	27 e0       	ldi	r18, 0x07	; 7
 230:	30 e0       	ldi	r19, 0x00	; 0
    uint8_to_string(millivolts, p);
}

// Función para leer un valor del ADC0831 (8 bits)
uint8_t readADC0831(void) {
    uint8_t value = 0;
 232:	80 e0       	ldi	r24, 0x00	; 0
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
 234:	1b c0       	rjmp	.+54     	; 0x26c <readADC0831+0x84>
        // Generar pulso de reloj
        PORTD |= (1 << CLK_PIN);
 236:	9b b1       	in	r25, 0x0b	; 11
 238:	90 61       	ori	r25, 0x10	; 16
 23a:	9b b9       	out	0x0b, r25	; 11
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	9a 95       	dec	r25
 240:	f1 f7       	brne	.-4      	; 0x23e <readADC0831+0x56>
 242:	00 00       	nop
        _delay_us(10);
        
        // Leer el bit de datos
        if (PIND & (1 << DO_PIN))
 244:	4b 9b       	sbis	0x09, 3	; 9
 246:	09 c0       	rjmp	.+18     	; 0x25a <readADC0831+0x72>
            value |= (1 << i);
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <readADC0831+0x6c>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <readADC0831+0x68>
 258:	84 2b       	or	r24, r20
            
        PORTD &= ~(1 << CLK_PIN);
 25a:	9b b1       	in	r25, 0x0b	; 11
 25c:	9f 7e       	andi	r25, 0xEF	; 239
 25e:	9b b9       	out	0x0b, r25	; 11
 260:	93 e0       	ldi	r25, 0x03	; 3
 262:	9a 95       	dec	r25
 264:	f1 f7       	brne	.-4      	; 0x262 <readADC0831+0x7a>
 266:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << CLK_PIN);
    _delay_us(10);
    
    // Leer los 8 bits, empezando por el MSB
    for (int i = 7; i >= 0; i--) {
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	31 09       	sbc	r19, r1
 26c:	33 23       	and	r19, r19
 26e:	1c f7       	brge	.-58     	; 0x236 <readADC0831+0x4e>
        PORTD &= ~(1 << CLK_PIN);
        _delay_us(10);
    }
    
    // Finalizar la conversión (CS a alto)
    PORTD |= (1 << CS_PIN);
 270:	9b b1       	in	r25, 0x0b	; 11
 272:	94 60       	ori	r25, 0x04	; 4
 274:	9b b9       	out	0x0b, r25	; 11
    
    return value;
}
 276:	08 95       	ret

00000278 <main>:

int main(void) {
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	2a 97       	sbiw	r28, 0x0a	; 10
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
    char buffer[10]; // Buffer para formatear valores numéricos
    
    // Configurar los pines del ADC
    DDRD |= (1 << CS_PIN) | (1 << CLK_PIN);  // CS y CLK como salidas
 28c:	8a b1       	in	r24, 0x0a	; 10
 28e:	84 61       	ori	r24, 0x14	; 20
 290:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << DO_PIN);                  // DO como entrada
 292:	8a b1       	in	r24, 0x0a	; 10
 294:	87 7f       	andi	r24, 0xF7	; 247
 296:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << DO_PIN);                  // Activar pull-up en DO
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	88 60       	ori	r24, 0x08	; 8
 29c:	8b b9       	out	0x0b, r24	; 11
    
    // Establecer estados iniciales
    PORTD |= (1 << CS_PIN);    // CS inicialmente en alto
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	84 60       	ori	r24, 0x04	; 4
 2a2:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << CLK_PIN);  // CLK inicialmente en bajo
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	8b b9       	out	0x0b, r24	; 11
    
    // Configurar PORTB como salida para LEDs
    DDRB = 0xFF;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;  // Inicializar apagados
 2ae:	15 b8       	out	0x05, r1	; 5
    
    // Inicializar USART
    USART_Init(MYUBRR);
 2b0:	89 e1       	ldi	r24, 0x19	; 25
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	87 ea       	ldi	r24, 0xA7	; 167
 2ba:	91 e6       	ldi	r25, 0x61	; 97
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x44>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x4a>
 2c2:	00 00       	nop
    
    // Retardo inicial para estabilización
    _delay_ms(100);
    
    // Mensaje de inicio
    USART_TransmitString("Iniciando lectura del ADC\r\n");
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
    
    while (1) {
        // Leer valor del ADC
        uint8_t adc_value = readADC0831();
 2cc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <readADC0831>
 2d0:	f8 2e       	mov	r15, r24
        
        // Calcular voltaje (en mV)
        // ADC de 8 bits (0-255) => Volt = (valor * VREF) / 255
        uint16_t voltage_mv = ((uint32_t)adc_value * VREF) / 255;
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	a8 e8       	ldi	r26, 0x88	; 136
 2d8:	b3 e1       	ldi	r27, 0x13	; 19
 2da:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__umulhisi3>
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	0e 94 c4 01 	call	0x388	; 0x388 <__udivmodsi4>
 2ea:	49 01       	movw	r8, r18
 2ec:	5a 01       	movw	r10, r20
        
        // Actualizar LEDs según valor leído
        PORTB = adc_value;
 2ee:	f5 b8       	out	0x05, r15	; 5
        
        // Enviar valor numérico por UART
        USART_TransmitString("Valor: ");
 2f0:	8c e1       	ldi	r24, 0x1C	; 28
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        uint8_to_string(adc_value, buffer);
 2f8:	be 01       	movw	r22, r28
 2fa:	6f 5f       	subi	r22, 0xFF	; 255
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	8f 2d       	mov	r24, r15
 300:	0e 94 6a 00 	call	0xd4	; 0xd4 <uint8_to_string>
        USART_TransmitString(buffer);
 304:	ce 01       	movw	r24, r28
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        
        // Mostrar voltaje
        USART_TransmitString(" | Voltaje: ");
 30c:	84 e2       	ldi	r24, 0x24	; 36
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        voltage_to_string(voltage_mv, buffer);
 314:	be 01       	movw	r22, r28
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	c4 01       	movw	r24, r8
 31c:	0e 94 a9 00 	call	0x152	; 0x152 <voltage_to_string>
        USART_TransmitString(buffer);
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        USART_TransmitString(" V");
 328:	81 e3       	ldi	r24, 0x31	; 49
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        
        // Mostrar representación binaria de LEDs
        USART_TransmitString(" | LEDs: ");
 330:	84 e3       	ldi	r24, 0x34	; 52
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        for (int i = 7; i >= 0; i--) {
 338:	07 e0       	ldi	r16, 0x07	; 7
 33a:	10 e0       	ldi	r17, 0x00	; 0
 33c:	15 c0       	rjmp	.+42     	; 0x368 <main+0xf0>
            if (adc_value & (1 << i)) {
 33e:	8f 2d       	mov	r24, r15
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	00 2e       	mov	r0, r16
 344:	02 c0       	rjmp	.+4      	; 0x34a <main+0xd2>
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <main+0xce>
 34e:	80 ff       	sbrs	r24, 0
 350:	05 c0       	rjmp	.+10     	; 0x35c <main+0xe4>
                USART_TransmitString("1");
 352:	8e e3       	ldi	r24, 0x3E	; 62
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
 35a:	04 c0       	rjmp	.+8      	; 0x364 <main+0xec>
            } else {
                USART_TransmitString("0");
 35c:	80 e4       	ldi	r24, 0x40	; 64
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
        USART_TransmitString(buffer);
        USART_TransmitString(" V");
        
        // Mostrar representación binaria de LEDs
        USART_TransmitString(" | LEDs: ");
        for (int i = 7; i >= 0; i--) {
 364:	01 50       	subi	r16, 0x01	; 1
 366:	11 09       	sbc	r17, r1
 368:	11 23       	and	r17, r17
 36a:	4c f7       	brge	.-46     	; 0x33e <main+0xc6>
                USART_TransmitString("1");
            } else {
                USART_TransmitString("0");
            }
        }
        USART_TransmitString("\r\n");
 36c:	89 e1       	ldi	r24, 0x19	; 25
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 5d 00 	call	0xba	; 0xba <USART_TransmitString>
 374:	9f e9       	ldi	r25, 0x9F	; 159
 376:	26 e8       	ldi	r18, 0x86	; 134
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	91 50       	subi	r25, 0x01	; 1
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x102>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x10c>
 384:	00 00       	nop
 386:	a2 cf       	rjmp	.-188    	; 0x2cc <main+0x54>

00000388 <__udivmodsi4>:
 388:	a1 e2       	ldi	r26, 0x21	; 33
 38a:	1a 2e       	mov	r1, r26
 38c:	aa 1b       	sub	r26, r26
 38e:	bb 1b       	sub	r27, r27
 390:	fd 01       	movw	r30, r26
 392:	0d c0       	rjmp	.+26     	; 0x3ae <__udivmodsi4_ep>

00000394 <__udivmodsi4_loop>:
 394:	aa 1f       	adc	r26, r26
 396:	bb 1f       	adc	r27, r27
 398:	ee 1f       	adc	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	a2 17       	cp	r26, r18
 39e:	b3 07       	cpc	r27, r19
 3a0:	e4 07       	cpc	r30, r20
 3a2:	f5 07       	cpc	r31, r21
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <__udivmodsi4_ep>
 3a6:	a2 1b       	sub	r26, r18
 3a8:	b3 0b       	sbc	r27, r19
 3aa:	e4 0b       	sbc	r30, r20
 3ac:	f5 0b       	sbc	r31, r21

000003ae <__udivmodsi4_ep>:
 3ae:	66 1f       	adc	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	1a 94       	dec	r1
 3b8:	69 f7       	brne	.-38     	; 0x394 <__udivmodsi4_loop>
 3ba:	60 95       	com	r22
 3bc:	70 95       	com	r23
 3be:	80 95       	com	r24
 3c0:	90 95       	com	r25
 3c2:	9b 01       	movw	r18, r22
 3c4:	ac 01       	movw	r20, r24
 3c6:	bd 01       	movw	r22, r26
 3c8:	cf 01       	movw	r24, r30
 3ca:	08 95       	ret

000003cc <__umulhisi3>:
 3cc:	a2 9f       	mul	r26, r18
 3ce:	b0 01       	movw	r22, r0
 3d0:	b3 9f       	mul	r27, r19
 3d2:	c0 01       	movw	r24, r0
 3d4:	a3 9f       	mul	r26, r19
 3d6:	70 0d       	add	r23, r0
 3d8:	81 1d       	adc	r24, r1
 3da:	11 24       	eor	r1, r1
 3dc:	91 1d       	adc	r25, r1
 3de:	b2 9f       	mul	r27, r18
 3e0:	70 0d       	add	r23, r0
 3e2:	81 1d       	adc	r24, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	91 1d       	adc	r25, r1
 3e8:	08 95       	ret

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
